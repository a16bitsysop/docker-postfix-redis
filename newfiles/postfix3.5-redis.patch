diff -Nurp a/conf/dynamicmaps.cf b/conf/dynamicmaps.cf
--- a/conf/dynamicmaps.cf	2014-05-30 12:38:33.000000000 +0100
+++ b/conf/dynamicmaps.cf	2020-09-26 19:03:58.778953237 +0100
@@ -5,5 +5,6 @@ lmdb	${LIB_PREFIX}lmdb${LIB_SUFFIX}	dict
 mysql	${LIB_PREFIX}mysql${LIB_SUFFIX}	dict_mysql_open
 pcre	${LIB_PREFIX}pcre${LIB_SUFFIX}	dict_pcre_open
 pgsql	${LIB_PREFIX}pgsql${LIB_SUFFIX}	dict_pgsql_open
+redis	${LIB_PREFIX}redis${LIB_SUFFIX} dict_redis_open
 sdbm	${LIB_PREFIX}sdbm${LIB_SUFFIX}	dict_sdbm_open	mkmap_sdbm_open
 sqlite	${LIB_PREFIX}sqlite${LIB_SUFFIX}	dict_sqlite_open
diff -Nurp a/conf/postfix-files b/conf/postfix-files
--- a/conf/postfix-files	2019-01-29 22:24:42.000000000 +0000
+++ b/conf/postfix-files	2020-09-26 19:03:58.782953224 +0100
@@ -78,6 +78,7 @@ $shlib_directory/${LIB_PREFIX}lmdb${LIB_
 $shlib_directory/${LIB_PREFIX}mysql${LIB_SUFFIX}:f:root:-:755
 $shlib_directory/${LIB_PREFIX}pcre${LIB_SUFFIX}:f:root:-:755
 $shlib_directory/${LIB_PREFIX}pgsql${LIB_SUFFIX}:f:root:-:755
+$shlib_directory/${LIB_PREFIX}redis${LIB_SUFFIX}:f:root:-:755
 $shlib_directory/${LIB_PREFIX}sdbm${LIB_SUFFIX}:f:root:-:755
 $shlib_directory/${LIB_PREFIX}sqlite${LIB_SUFFIX}:f:root:-:755
 $meta_directory/dynamicmaps.cf.d:d:root:-:755
diff -Nurp a/makedefs b/makedefs
--- a/makedefs	2020-05-06 15:10:47.000000000 +0100
+++ b/makedefs	2020-09-26 19:03:58.782953224 +0100
@@ -1167,7 +1167,7 @@ DEFINED_MAP_TYPES=`
 
 # Propagate AUXLIBS_FOO or merge them into global AUXLIBS (i.e. SYSLIBS).
 
-PLUGGABLE_MAPS="CDB LDAP LMDB MYSQL PCRE PGSQL SDBM SQLITE"
+PLUGGABLE_MAPS="CDB LDAP LMDB MYSQL PCRE PGSQL REDIS SDBM SQLITE"
 
 case "$dynamicmaps" in
 yes) for name in $PLUGGABLE_MAPS
diff -Nurp a/src/global/dict_redis.c b/src/global/dict_redis.c
--- a/src/global/dict_redis.c	1970-01-01 01:00:00.000000000 +0100
+++ b/src/global/dict_redis.c	2020-09-26 19:03:43.031002674 +0100
@@ -0,0 +1,217 @@
+/*++
+/* NAME
+/*	dict_redis 3
+/* SUMMARY
+/*	dictionary manager interface to Redis databases
+/* SYNOPSIS
+/*	#include <dict_redis.h>
+/*
+/*	DICT	*dict_redis_open(name, open_flags, dict_flags)
+/*	const char *name;
+/*	int	open_flags;
+/*	int	dict_flags;
+/* DESCRIPTION
+/*	dict_redis_open() creates a dictionary of type 'redis'.  This
+/*	dictionary is an interface for the postfix key->value mappings
+/*	to redis.  The result is a pointer to the installed dictionary,
+/*	or a null pointer in case of problems.
+/* .PP
+/*	Arguments:
+/* .IP name
+/*	Either the path to the Redis configuration file (if it
+/*	starts with '/' or '.'), or the prefix which will be used to
+/*	obtain main.cf configuration parameters for this search.
+/*
+/*	In the first case, the configuration parameters below are
+/*	specified in the file as \fIname\fR=\fIvalue\fR pairs.
+/*
+/*	In the second case, the configuration parameters are
+/*	prefixed with the value of \fIname\fR and an underscore,
+/*	and they are specified in main.cf.  For example, if this
+/*	value is \fIredisDB\fR, the parameters would look like
+/*	\fIredisDB_host\fR, \fIpredisDB_prefix\fR, and so on.
+/* .IP other_name
+/*	reference for outside use.
+/* .IP open_flags
+/*	unused.
+/* .IP dict_flags
+/*	See dict_open(3).
+/*
+/* .PP
+/*	Configuration parameters:
+/* .IP host
+/*	IP address of the redis server hosting the database.
+/* .IP port
+/*	Port number to connect to the above.
+/* .IP prefix
+/*	Prefix to add to the key when looking it up.
+/* .PP
+/*	For example, if you want the map to reference databases on
+/*	redis host "127.0.0.1" and prefix the query with VDOM:
+/*	Then the configuration file
+/*	should read:
+/* .PP
+/*	host = 127.0.0.1
+/* .br
+/*	port = 6379
+/* .br
+/*	prefix = VDOM:
+/* .PP
+/* SEE ALSO
+/*	dict(3) generic dictionary manager
+/* AUTHOR(S)
+/*	Titus Jose
+/*	titus.nitt@gmail.com
+/*
+/*	Updated by:
+/*	Duncan Bellamy
+/*	dunk@denkimushi.com
+/*--*/
+
+#include "sys_defs.h"
+
+#ifdef HAS_REDIS
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#ifdef STRCASECMP_IN_STRINGS_H
+#include <strings.h>
+#endif
+
+/* Utility library. */
+
+#include "msg.h"
+#include "dict.h"
+#include "mymalloc.h"
+#include "vstring.h"
+#include "stringops.h"
+
+/* Global library. */
+
+#include "cfg_parser.h"
+
+/* Application-specific. */
+
+#include "dict_redis.h"
+#include "hiredis.h"
+
+typedef struct {
+    DICT    dict;
+    CFG_PARSER *parser;
+    redisContext *c;
+    char   *host;
+    int     port;
+    char   *prefix;
+} DICT_REDIS;
+
+/* internal function declarations */
+static const char *dict_redis_lookup(DICT *, const char *);
+DICT   *dict_redis_open(const char *, int, int);
+static void dict_redis_close(DICT *);
+static void redis_parse_config(DICT_REDIS *, const char *);
+
+
+static const char *dict_redis_lookup(DICT *dict, const char *name)
+{
+    const char *myname = "dict_redis_lookup";
+    DICT_REDIS *dict_redis = (DICT_REDIS *) dict;
+    redisReply *reply;
+    const char *r;
+    VSTRING *result;
+    dict->error = 0;
+
+    result = vstring_alloc(10);
+    VSTRING_RESET(result);
+    VSTRING_TERMINATE(result);
+
+
+    if (msg_verbose)
+        msg_info("%s: Requesting key %s%s",dict_redis->host,dict_redis->prefix,name);
+    /*
+     * Optionally fold the key.
+     */
+    if (dict->flags & DICT_FLAG_FOLD_FIX) {
+	if (dict->fold_buf == 0)
+	    dict->fold_buf = vstring_alloc(10);
+	vstring_strcpy(dict->fold_buf, name);
+	name = lowercase(vstring_str(dict->fold_buf));
+    }
+
+    if(dict_redis->c) {
+        reply = redisCommand(dict_redis->c,"GET %s%s",dict_redis->prefix,name);
+    }
+    else {
+        dict->error = DICT_ERR_CONFIG;
+    }
+    if(reply->str) {
+        vstring_strcpy(result,reply->str);
+        r = vstring_str(result);
+        freeReplyObject(reply);
+    }
+    else {
+        return(0);
+    }
+    return ((dict->error == 0 && *r) ? r : 0);
+}
+
+/* redis_parse_config - parse redis configuration file */
+
+static void redis_parse_config(DICT_REDIS *dict_redis, const char *rediscf)
+{
+    const char *myname = "redisname_parse";
+    CFG_PARSER *p = dict_redis->parser;
+
+    dict_redis->port = cfg_get_int(p, "port", 6379, 0, 0);
+    dict_redis->host = cfg_get_str(p, "host", "127.0.0.1", 1, 0);
+    dict_redis->prefix = cfg_get_str(p, "prefix", "", 0, 0);
+}
+
+/* dict_redis_open - open redis data base */
+
+DICT   *dict_redis_open(const char *name, int open_flags, int dict_flags)
+{
+    DICT_REDIS *dict_redis;
+    CFG_PARSER *parser;
+    redisContext *c;
+
+    /*
+     * Open the configuration file.
+     */
+    if ((parser = cfg_parser_alloc(name)) == 0)
+	return (dict_surrogate(DICT_TYPE_REDIS, name, open_flags, dict_flags,
+			       "open %s: %m", name));
+
+    dict_redis = (DICT_REDIS *) dict_alloc(DICT_TYPE_REDIS, name,
+					   sizeof(DICT_REDIS));
+    dict_redis->dict.lookup = dict_redis_lookup;
+    dict_redis->dict.close = dict_redis_close;
+    dict_redis->dict.flags = dict_flags;
+    dict_redis->parser = parser;
+    redis_parse_config(dict_redis, name);
+    dict_redis->dict.owner = cfg_get_owner(dict_redis->parser);
+    c = redisConnect(dict_redis->host,dict_redis->port);
+    if(c->err) {
+        msg_fatal("%s:%s: Cannot connect to Redis server %s: %s\n",
+            DICT_TYPE_REDIS, name, dict_redis->host, c->errstr);
+    } else {
+        dict_redis->c = c;
+    }
+
+    return (DICT_DEBUG (&dict_redis->dict));
+}
+
+/* dict_redis_close - close redis database */
+
+static void dict_redis_close(DICT *dict)
+{
+    DICT_REDIS *dict_redis = (DICT_REDIS *) dict;
+
+    cfg_parser_free(dict_redis->parser);
+    myfree(dict_redis->host);
+    if (dict->fold_buf)
+	vstring_free(dict->fold_buf);
+    dict_free(dict);
+}
+
+#endif
diff -Nurp a/src/global/dict_redis.h b/src/global/dict_redis.h
--- a/src/global/dict_redis.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/global/dict_redis.h	2020-09-26 19:03:43.031002674 +0100
@@ -0,0 +1,10 @@
+#ifndef _DICT_REDIS_H_INCLUDED_
+#define _DICT_REDIS_H_INCLUDED_
+
+#include <dict.h>
+
+#define DICT_TYPE_REDIS	"redis"
+
+extern DICT *dict_redis_open(const char *, int, int);
+
+#endif
diff -Nurp a/src/global/mail_dict.c b/src/global/mail_dict.c
--- a/src/global/mail_dict.c	2014-06-22 01:42:55.000000000 +0100
+++ b/src/global/mail_dict.c	2020-09-26 19:03:58.782953224 +0100
@@ -45,6 +45,7 @@
 #include <dict_ldap.h>
 #include <dict_mysql.h>
 #include <dict_pgsql.h>
+#include <dict_redis.h>
 #include <dict_sqlite.h>
 #include <dict_memcache.h>
 #include <mail_dict.h>
@@ -68,6 +69,9 @@ static const DICT_OPEN_INFO dict_open_in
 #ifdef HAS_PGSQL
     DICT_TYPE_PGSQL, dict_pgsql_open,
 #endif
+#ifdef HAS_REDIS
+    DICT_TYPE_REDIS, dict_redis_open,
+#endif
 #ifdef HAS_SQLITE
     DICT_TYPE_SQLITE, dict_sqlite_open,
 #endif
diff -Nurp a/src/global/Makefile.in b/src/global/Makefile.in
--- a/src/global/Makefile.in	2020-01-12 13:50:56.000000000 +0000
+++ b/src/global/Makefile.in	2020-09-26 19:03:58.786953212 +0100
@@ -3,7 +3,7 @@ SRCS	= abounce.c anvil_clnt.c been_here.
 	canon_addr.c cfg_parser.c cleanup_strerror.c cleanup_strflags.c \
 	clnt_stream.c conv_time.c db_common.c debug_peer.c debug_process.c \
 	defer.c deliver_completed.c deliver_flock.c deliver_pass.c \
-	deliver_request.c dict_ldap.c dict_mysql.c dict_pgsql.c \
+	deliver_request.c dict_ldap.c dict_mysql.c dict_pgsql.c dict_redis.c \
 	dict_proxy.c dict_sqlite.c domain_list.c dot_lockfile.c dot_lockfile_as.c \
 	dsb_scan.c dsn.c dsn_buf.c dsn_mask.c dsn_print.c dsn_util.c \
 	ehlo_mask.c ext_prop.c file_id.c flush_clnt.c header_opts.c \
@@ -78,13 +78,13 @@ OBJS	= abounce.o anvil_clnt.o been_here.
 # MAP_OBJ is for maps that may be dynamically loaded with dynamicmaps.cf.
 # When hard-linking these maps, makedefs sets NON_PLUGIN_MAP_OBJ=$(MAP_OBJ),
 # otherwise it sets the PLUGIN_* macros.
-MAP_OBJ = dict_ldap.o dict_mysql.o dict_pgsql.o dict_sqlite.o mkmap_cdb.o \
+MAP_OBJ = dict_ldap.o dict_mysql.o dict_pgsql.o dict_redis.o dict_sqlite.o mkmap_cdb.o \
 	mkmap_lmdb.o mkmap_sdbm.o 
 HDRS	= abounce.h anvil_clnt.h been_here.h bounce.h bounce_log.h \
 	canon_addr.h cfg_parser.h cleanup_user.h clnt_stream.h config.h \
 	conv_time.h db_common.h debug_peer.h debug_process.h defer.h \
 	deliver_completed.h deliver_flock.h deliver_pass.h deliver_request.h \
-	dict_ldap.h dict_mysql.h dict_pgsql.h dict_proxy.h dict_sqlite.h domain_list.h \
+	dict_ldap.h dict_mysql.h dict_pgsql.h dict_redis.h dict_proxy.h dict_sqlite.h domain_list.h \
 	dot_lockfile.h dot_lockfile_as.h dsb_scan.h dsn.h dsn_buf.h \
 	dsn_mask.h dsn_print.h dsn_util.h ehlo_mask.h ext_prop.h \
 	file_id.h flush_clnt.h header_opts.h header_token.h input_transp.h \
@@ -131,7 +131,7 @@ LIBS	= ../../lib/lib$(LIB_PREFIX)util$(L
 LIB_DIR	= ../../lib
 INC_DIR	= ../../include
 PLUGIN_MAP_SO = $(LIB_PREFIX)ldap$(LIB_SUFFIX) $(LIB_PREFIX)mysql$(LIB_SUFFIX) \
-	$(LIB_PREFIX)pgsql$(LIB_SUFFIX) $(LIB_PREFIX)sqlite$(LIB_SUFFIX) \
+	$(LIB_PREFIX)pgsql$(LIB_SUFFIX) $(LIB_PREFIX)redis$(LIB_SUFFIX) $(LIB_PREFIX)sqlite$(LIB_SUFFIX) \
 	$(LIB_PREFIX)lmdb$(LIB_SUFFIX) $(LIB_PREFIX)cdb$(LIB_SUFFIX) \
 	$(LIB_PREFIX)sdbm$(LIB_SUFFIX)
 MAKES	=
@@ -167,6 +167,9 @@ $(LIB_PREFIX)mysql$(LIB_SUFFIX): dict_my
 $(LIB_PREFIX)pgsql$(LIB_SUFFIX): dict_pgsql.o
 	$(PLUGIN_LD) $(SHLIB_RPATH) -o $@ dict_pgsql.o $(AUXLIBS_PGSQL)
 
+$(LIB_PREFIX)redis$(LIB_SUFFIX): dict_redis.o
+	$(PLUGIN_LD) $(SHLIB_RPATH) -o $@ dict_redis.o $(AUXLIBS_REDIS)
+
 $(LIB_PREFIX)sqlite$(LIB_SUFFIX): dict_sqlite.o
 	$(PLUGIN_LD) $(SHLIB_RPATH) -o $@ dict_sqlite.o $(AUXLIBS_SQLITE)
 
@@ -521,6 +524,8 @@ surrogate_test: mail_dict surrogate.ref
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict mysql:/xx read >>surrogate.tmp 2>&1
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict pgsql:/xx write >>surrogate.tmp 2>&1
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict pgsql:/xx read >>surrogate.tmp 2>&1
+	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict redis:/xx write >>surrogate.tmp 2>&1
+	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict redis:/xx read >>surrogate.tmp 2>&1
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict sqlite:/xx write >>surrogate.tmp 2>&1
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict sqlite:/xx read >>surrogate.tmp 2>&1
 	echo get foo| $(SHLIB_ENV) $(VALGRIND) ./mail_dict memcache:/xx read >>surrogate.tmp 2>&1
@@ -1183,6 +1188,17 @@ dict_pgsql.o: db_common.h
 dict_pgsql.o: dict_pgsql.c
 dict_pgsql.o: dict_pgsql.h
 dict_pgsql.o: string_list.h
+dict_redis.o: ../../include/dict.h
+dict_redis.o: ../../include/msg.h
+dict_redis.o: ../../include/mymalloc.h
+dict_redis.o: ../../include/vbuf.h
+dict_redis.o: ../../include/vstream.h
+dict_redis.o: ../../include/vstring.h
+dict_redis.o: ../../include/stringops.h
+dict_redis.o: ../../include/sys_defs.h
+dict_redis.o: cfg_parser.h
+dict_redis.o: dict_redis.c
+dict_redis.o: dict_redis.h
 dict_proxy.o: ../../include/argv.h
 dict_proxy.o: ../../include/attr.h
 dict_proxy.o: ../../include/check_arg.h
@@ -1768,6 +1784,7 @@ mail_dict.o: dict_ldap.h
 mail_dict.o: dict_memcache.h
 mail_dict.o: dict_mysql.h
 mail_dict.o: dict_pgsql.h
+mail_dict.o: dict_redis.h
 mail_dict.o: dict_proxy.h
 mail_dict.o: dict_sqlite.h
 mail_dict.o: dynamicmaps.h
